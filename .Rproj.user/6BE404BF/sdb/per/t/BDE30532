{
    "contents" : "#' Plots one of the following plots for a single function:\n#' - Steps plot with mean and std contributions for all taxa\n#' - Ring plot where the contributions are shown as a ring\n#' - Bar plot where the contributions are shown as a bar\n#'\n#' @param input_dir The directory where all the FiShTaCo input files can be found (default: NULL).\n#' @param input_prefix The prefix for all input files (e.g., pathway_with_t2f, default: NULL).\n#' @param input_suffix The suffix for all input files (default: \".tab\").\n#' @param input_score The calculated shift score for all input files (default: wilcoxon).\n#' @param input_matrix_mean The mean contribution stat name (default: \"mean_stat\").\n#' @param input_matrix_std The contribution std stat name (default: \"std_stat\").\n#' @param input_permutation The permutation type used for all input files (default: \"multi_taxa\").\n#' @param input_original The original shift stat name (default: \"original_value\").\n#' @param input_function The function to plot (default: NULL).\n#' @param min_contribution The minimum taxon contribution to include in plot  (default: 0).\n#' @param input_function_meta Metadata file for the functions to include (default: NULL).\n#' @param input_taxa_taxonomy Taxonomy file for the given taxa (default: NULL).\n#' @param plot_type defines the type of plot to be plotted (default: \"steps\").\n#' @param flip_case_control flip the case and control contribution (default: FALSE).\n#' @param class_label_1 label for the the controls (default: NULL).\n#' @param class_label_2 label for the the cases (default: NULL).\n#' @param add_phyla_names_to_species_label indicating whether to add the phylum to each species (default: FALSE).\n#'\n#' @return a handle to the resulting plot.\n#' @export\n\nSingleFunctionTaxaContributionPlots <- function(input_dir=NULL, \n                                                input_prefix=NULL, \n                                                input_suffix=\".tab\", \n                                                input_score=\"wilcoxon\",\n                                                input_matrix_mean=\"mean_stat\", \n                                                input_matrix_std=\"std_stat\",\n                                                input_permutation=\"multi_taxa\", \n                                                input_original=\"original_value\",\n                                                input_function=NULL,                                             \n                                                min_contribution=0, \n                                                input_function_meta=NULL,\n                                                input_taxa_taxonomy=NULL, \n                                                plot_type=\"steps\",\n                                                flip_case_control=FALSE, \n                                                class_label_1=NULL,\n                                                class_label_2=NULL,\n                                                add_phyla_names_to_species_label=FALSE) {\n\n  \n  use_example_input = FALSE\n  \n  if (use_example_input) { \n    print(\"Using example input for testing...\")\n    # example input\n    input_dir=\"/Volumes/ohadm/OhadM/METAFIT/HMP_DATA/TONGUE_DORSUM_vs_BUCCAL_MUCOSA/Output_METAPHLAN_REMOVE_RESIDUAL_SCALE_PERMUTED\"\n    input_prefix=\"pathway_with_t2f\"\n    input_score=\"wilcoxon\"\n    input_matrix_mean=\"mean_stat\"\n    input_matrix_std=\"std_stat\"\n    input_original=\"original_value\"\n    input_permutation=\"multi_taxa\"\n    input_function=\"ko00020\"\n    input_suffix=\".tab\"\n    plot_type=\"steps\" # ring steps bar\n    input_function_meta=\"/Volumes/ohadm/OhadM/MUSiCC/Matrices/PATHWAYvsNAME_BACTERIAL_KEGG_2013_07_15.lst\"\n    input_taxa_taxonomy = \"/Volumes/ohadm/OhadM/METAFIT/HMP_DATA/METAPHLAN_taxa_vs_TAXONOMY.tab\"\n    min_contribution=0.025\n    flip_case_control=TRUE\n    class_label_1=\"TONGUE\"\n    class_label_2=\"BUCCAL\"\n    add_phyla_names_to_species_label=FALSE\n  }\n\n\n  #\n  ##############\n  # READ INPUT\n  ##############\n  mean_stat = read.table(paste(input_dir,'/',input_prefix,\"_STAT_\",input_matrix_mean,\"_SCORE_\",input_score,\"_ASSESSMENT_\",input_permutation,\".tab\", sep=\"\"), sep = \"\\t\", header=TRUE, stringsAsFactors=FALSE)\n  std_stat = read.table(paste(input_dir,'/',input_prefix,\"_STAT_\",input_matrix_std,\"_SCORE_\",input_score,\"_ASSESSMENT_\",input_permutation,\".tab\", sep=\"\"), sep = \"\\t\", header=TRUE, stringsAsFactors=FALSE)\n  original_stat = read.table(paste(input_dir,'/',input_prefix,\"_STAT_\",input_original,\"_SCORE_\",input_score,\"_ASSESSMENT_\",input_permutation,\".tab\", sep=\"\"), sep = \"\\t\", header=TRUE, stringsAsFactors=FALSE)\n  original_stat[, input_score] = 0\n\n  if (flip_case_control) {\n    mean_stat[, -1] = -1 * mean_stat[, -1]\n    std_stat[, -1] = -1 * std_stat[, -1]\n    tmp_label = class_label_1\n    class_label_1 = class_label_2\n    class_label_2 = tmp_label\n  }\n\n  if (!is.null(input_function)){\n    function_index = which(original_stat$KO == input_function)\n  } else {\n    function_index = 1\n    input_function = original_stat$KO[function_index]\n  }\n\n  if (!is.null(input_function_meta)) {\n    meta = read.table(input_function_meta, sep = \"\\t\", header=FALSE, stringsAsFactors=FALSE,  quote=\"\")\n    rownames(meta) = meta[,1]\n    meta[,1] = NULL\n    function_name = meta[input_function,]\n  } else {\n    function_name = input_function\n  }\n\n  if (!is.null(input_taxa_taxonomy)) {\n    print(\"Uploading taxonomy file\")\n    \n    taxonomy = read.table(input_taxa_taxonomy, sep = \"\\t\", header=FALSE, stringsAsFactors=FALSE)\n    rownames(taxonomy) = taxonomy[,1]\n    taxonomy[,1] = NULL\n    names(taxonomy) = c('kingdom','phylum','class','order','family','genus','species')\n\n    for (i in 1:length(mean_stat$Taxa)) {\n      curr_taxa = mean_stat$Taxa[i]\n      #print(curr_taxa)\n      if (!is.na(taxonomy[curr_taxa,\"species\"])){\n        #print(paste(taxonomy[curr_taxa,\"genus\"],taxonomy[curr_taxa,\"species\"]))\n        if (taxonomy[curr_taxa,\"species\"] != \" s__\") {\n          curr_taxonomy_names = paste(taxonomy[curr_taxa,\"phylum\"], taxonomy[curr_taxa,\"genus\"], taxonomy[curr_taxa,\"species\"])\n        } else if (taxonomy[curr_taxa,\"genus\"] != \" g__\") {\n          curr_taxonomy_names = paste(taxonomy[curr_taxa,\"phylum\"], taxonomy[curr_taxa,\"genus\"],paste(\"s__\",curr_taxa,sep=\"\"))\n        } else if (taxonomy[curr_taxa,\"family\"] != \" f__\") {\n          curr_taxonomy_names = paste(taxonomy[curr_taxa,\"phylum\"], taxonomy[curr_taxa,\"family\"],paste(\"s__\",curr_taxa,sep=\"\"))\n        } else if (taxonomy[curr_taxa,\"order\"] != \" o__\") {\n          curr_taxonomy_names = paste(taxonomy[curr_taxa,\"phylum\"], taxonomy[curr_taxa,\"order\"],paste(\"s__\",curr_taxa,sep=\"\"))\n        } else if (taxonomy[curr_taxa,\"order\"] != \" c__\") {\n          curr_taxonomy_names = paste(taxonomy[curr_taxa,\"phylum\"], taxonomy[curr_taxa,\"class\"],paste(\"s__\",curr_taxa,sep=\"\"))\n        } else {\n          curr_taxonomy_names = paste(taxonomy[curr_taxa,\"kingdom\"], taxonomy[curr_taxa,\"phylum\"], curr_taxa)\n        }\n      } else if (curr_taxa == \"Unknown\"){\n        curr_taxonomy_names = curr_taxa\n      } else {\n        curr_taxonomy_names = paste(\" g__\", paste(\"s__\",curr_taxa,sep=\"\"))\n      }\n\n      mean_stat$Taxa[i] = curr_taxonomy_names\n    }\n  }\n\n  sort_index = sort(mean_stat[,function_index+1], index.return=TRUE, decreasing=TRUE)$ix\n  df = data.frame(mean_stat[sort_index,function_index+1], std_stat[sort_index,function_index+1])\n  names(df) =  c(\"mean\",\"std\")\n  df$Taxa = factor(mean_stat$Taxa[sort_index], levels=mean_stat$Taxa[sort_index])\n  df = df[c(\"Taxa\",\"mean\",\"std\")]\n\n  ## remove taxa that have a very low contribution on selected function\n  taxa_with_contribution = which(abs(df$mean) > min_contribution)\n  df = df[taxa_with_contribution,]\n  \n  # if needed, clean the taxa names a bit\n  if (!add_phyla_names_to_species_label) {\n    df$Taxa = as.character(df$Taxa)\n    df$Taxa[grepl(\"g__\", df$Taxa)] = gsub(\"s__\",\"\", gsub(\"g__\",\"\", gsub(\"p__.*g__\",\"g__\", df$Taxa[grepl(\"g__\", df$Taxa)])))\n    \n    df$Taxa = factor(df$Taxa, levels=unique(df$Taxa))\n  }\n    \n  ############################################\n  ## STEPS PLOT\n  ############################################\n\n  stepsPlot = ggplot(df, aes(x=mean, y=Taxa))  +\n    geom_vline(xintercept = original_stat[function_index,2], colour=\"blue\") +\n    geom_errorbarh(aes(xmax = mean+std, xmin = mean-std, height = .4), size=1.5) +\n    geom_point(colour=\"#990000\", size=2) +\n    ggtitle(paste(original_stat$KO[function_index], class_label_1, \"vs\", class_label_2)) +\n    xlab(paste(function_name,\": Mean contribution to\",input_score,\"when assessing with\",input_permutation)) \n  \n  \n  ############################################\n  ## RING PLOT\n  ############################################\n\n  if (plot_type == \"ring\" || plot_type == \"bar\") {\n    # extract only the positive contributions\n    pos = df[df['mean'] > 0,]\n    neg = df[df['mean'] < 0,]\n    pos_sum = abs(sum(pos$mean))\n    neg_sum = abs(sum(neg$mean))\n\n    if (neg_sum > pos_sum) { # this is a control-enriched function, so swipe the pos/neg data.frames\n      tmp = neg\n      neg = pos\n      pos = tmp\n    }\n\n    pos_sum = abs(sum(pos$mean))\n    pos$mean = round(100 * abs(pos$mean) / pos_sum)\n    pos = pos[with(pos, order(mean, decreasing=TRUE)), ]\n    pos$ymax = cumsum(pos$mean)\n    pos$ymin = c(0, head(pos$ymax, n=-1))\n\n    neg_sum = abs(sum(neg$mean))\n    neg$mean = round(100 * abs(neg$mean) / neg_sum)\n    neg = neg[with(neg, order(mean, decreasing=TRUE)), ]\n    neg$ymax = cumsum(neg$mean)\n    neg$ymin = c(0, head(neg$ymax, n=-1))\n\n\n    neg_pos_ratio = neg_sum / pos_sum\n    if (neg_pos_ratio < 0.1){\n      neg_pos_ratio = 0.1\n    }\n\n    pos$pos_xmin = 3\n    pos$pos_xmax = 4\n    neg$neg_xmin = 2\n    neg$neg_xmax = neg$neg_xmin + neg_pos_ratio\n\n    # create the text of the percentages\n    df_to_plot = data.frame(c(pos$mean, neg$mean), c(as.character(pos$Taxa), as.character(neg$Taxa)),\n                          c(pos$ymax, neg$ymax), c(pos$ymin, neg$ymin),\n                          c(pos$pos_xmax, neg$neg_xmax), c(pos$pos_xmin, neg$neg_xmin),\n                           c((pos$pos_xmin+pos$pos_xmax)/2, (neg$neg_xmin+neg$neg_xmax)/2),\n                           c(pos$mean/2 + c(0, cumsum(pos$mean)[-length(pos$mean)]),\n                             neg$mean/2 + c(0, cumsum(neg$mean)[-length(neg$mean)])))\n\n    names(df_to_plot) = c(\"val\",\"Taxa\",\"ymax\",\"ymin\",\"xmax\",\"xmin\",\"x_text\",\"y_text\")\n    df_to_plot$Taxa = factor(df_to_plot$Taxa, levels=df_to_plot$Taxa)\n\n    RingPlot = ggplot(df_to_plot, aes(fill=Taxa, ymax=ymax, ymin=ymin, xmax=xmax, xmin=xmin)) +\n      geom_rect(colour=\"grey30\") +\n      coord_polar(theta=\"y\") +\n      geom_text(aes(x = x_text, y = y_text, label = paste(val,\"%\",sep=\"\")), size=7) +\n      xlim(c(0, 4)) +\n      theme_bw() +\n      theme(panel.border = element_blank()) +\n      theme(panel.grid=element_blank()) +\n      theme(axis.text=element_blank()) +\n      theme(axis.ticks=element_blank()) +\n      theme(axis.title=element_blank()) +\n      ggtitle(paste(function_name,\": Taxa contribution to\",input_score,\"when assessing with\",input_permutation)) +\n      theme(plot.title = element_text(face=\"bold\", size=20))\n\n    BarPlot = ggplot(df_to_plot, aes(fill=Taxa, xmax=ymax, xmin=ymin, ymax=xmax, ymin=xmin)) +\n      geom_rect(colour=\"grey30\") +\n      geom_text(aes(x = y_text, y = x_text, label = paste(val,\"%\",sep=\"\")), size=7) +\n      ylim(c(0, 4)) +\n      theme_bw() +\n      theme(panel.border = element_blank()) +\n      theme(panel.grid=element_blank()) +\n      theme(axis.text=element_blank()) +\n      theme(axis.ticks=element_blank()) +\n      theme(axis.title=element_blank()) +\n      ggtitle(paste(function_name,\": Taxa contribution to\",input_score,\"when assessing with\",input_permutation)) +\n      theme(plot.title = element_text(face=\"bold\", size=20))\n  }\n\n  #################################################################################################\n  # RETURN\n  #################################################################################################\n\n  if (plot_type == \"steps\") {\n    return(stepsPlot)\n  } else if (plot_type == \"ring\") {\n    return(RingPlot)\n  } else if (plot_type == \"bar\") {\n    return(BarPlot)\n  } else {\n    print(\"Error: unknown plot type\")\n    return(NULL)\n  }\n\n}\n\n",
    "created" : 1434648653877.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "287248118",
    "id" : "BDE30532",
    "lastKnownWriteTime" : 1435259411,
    "path" : "/Volumes/ohadm/BorensteinLab/PROJECTS/FISHTACO_OM/METAFIT/Rcode/FishTacoPlot/R/SingleFunctionTaxaContributionPlots.R",
    "project_path" : "R/SingleFunctionTaxaContributionPlots.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}